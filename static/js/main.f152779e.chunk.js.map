{"version":3,"sources":["components/Heading.js","components/Maze.js","App.js","index.js"],"names":["Heading","className","Maze","maze","n","x","push","init","handleClick","event","target","style","backgroundColor","includes","parseInt","innerHTML","splice","indexOf","calcPosition","num","row","Math","floor","col","getNumPosition","s","solveMaze","path","reverse","current","pop","visual","document","getElementById","console","log","map","id","onMouseOver","onClick","App","ReactDOM","render","StrictMode"],"mappings":"kMAUeA,EAVC,WACZ,OACI,sBAAKC,UAAU,kBAAf,UACI,oBAAIA,UAAU,QAAd,qCACA,mBAAGA,UAAU,MAAb,8CACA,mBAAGA,UAAU,MAAb,kDCmGGC,EAvGF,WACT,IAAIC,EAAM,IAkBE,SAACC,GACT,IAAI,IAAIC,EAAE,EAAGA,EAAED,EAAGC,IACdF,EAAKG,KAAKD,GAKlBE,CAAK,KAEL,IAAMC,EAAc,SAACC,GACjBA,EAAMC,OAAOC,MAAMC,gBAAkB,qBACjCT,EAAKU,SAASC,SAASL,EAAMC,OAAOK,aACpCZ,EAAKa,OAAOb,EAAKc,QAAQH,SAASL,EAAMC,OAAOK,YAAY,IAI7DG,EAAc,SAACC,GAGjB,MAAO,CAACC,IAFEC,KAAKC,MAAMH,EAAK,IAEdI,IADFJ,EAAI,KAIZK,EAAe,SAACJ,EAAKG,GACvB,IAAIE,EAAI,GAIR,OAHAA,GAAKL,EACLK,GAAKF,EACKT,SAASW,IAIjBC,EAAY,WAMd,IALA,IAAIC,EAAO,GAEPD,EAAYvB,EAAKyB,UACjBC,EAAUH,EAAUI,MAEN,KAAZD,GAAe,CACjB,IAAIE,EAASC,SAASC,eAAeJ,GACrCE,EAAOpB,MAAMC,gBAAkB,UAE/B,IAAIQ,EAAOF,EAAaW,GAAST,IAC7BG,EAAOL,EAAaW,GAASN,KAEoB,IAAlDG,EAAUT,QAAQO,EAAeJ,EAAI,EAAEG,KAEtCM,EAAUL,EAAeJ,EAAI,EAAEG,GAE/BG,EAAUV,OAAOU,EAAUT,QAAQO,EAAeJ,EAAI,EAAEG,IAAO,KACP,IAAlDG,EAAUT,QAAQO,EAAeJ,EAAI,EAAEG,KAE7CM,EAAUL,EAAeJ,EAAI,EAAEG,GAC/BG,EAAUV,OAAOU,EAAUT,QAAQO,EAAeJ,EAAI,EAAEG,IAAO,KACP,IAAlDG,EAAUT,QAAQO,EAAeJ,EAAIG,EAAI,KAE/CM,EAAUL,EAAeJ,EAAIG,EAAI,GACjCG,EAAUV,OAAOU,EAAUT,QAAQO,EAAeJ,EAAIG,EAAI,IAAK,KACP,IAAlDG,EAAUT,QAAQO,EAAeJ,EAAIG,EAAI,KAE/CM,EAAUL,EAAeJ,EAAIG,EAAI,GACjCG,EAAUV,OAAOU,EAAUT,QAAQO,EAAeJ,EAAIG,EAAI,IAAK,KAE/DI,EAAKG,MACLC,EAAOpB,MAAMC,gBAAkB,QAC/BiB,EAAUF,EAAKG,OAEnBH,EAAKrB,KAAKuB,GAGdK,QAAQC,IAAIR,IAGhB,OACI,sBAAK1B,UAAU,UAAf,UACI,qBAAKA,UAAU,eAAf,SACCE,EAAKiC,KAAI,SAAAjB,GAAG,OACT,qBAAKkB,GAAKlB,EAAKlB,UAAU,cAAcqC,YAAe9B,EAAa+B,QAAU/B,EAA7E,SAAuGW,GAANA,QAIzG,wBAAQoB,QAASb,EAAWzB,UAAY,MAAxC,uBCtFOuC,MAVf,WACE,OACE,sBAAKvC,UAAU,MAAf,UACA,cAAC,EAAD,IACA,cAAC,EAAD,QCFJwC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFX,SAASC,eAAe,U","file":"static/js/main.f152779e.chunk.js","sourcesContent":["const Heading = () => {\n    return ( \n        <div className=\"heading-wrapper\">\n            <h1 className=\"title\">Interactive Maze Solver</h1>\n            <p className=\"add\">Create a path going from 0 to 99</p>\n            <p className=\"add\">Click on a box to make it a wall</p>\n        </div>\n     );\n}\n \nexport default Heading;","\nconst Maze = () => {\n    let maze =[];\n\n    let presetMazeOne = [];//these would be mazes with moves that are not available \n    let presetMazetwo = [];\n    let presetMazeThree = [];\n    let presetMazeFour = [];\n\n    const handlePresetMaze = (maze) =>{//crating an array of available moves \n        let mazeNumber = maze;\n        mazeNumber.array.forEach(element => {\n            let temp = document.getElementById(element);\n            temp.style.backgroundColor = \"putrple\"\n            mazeNumber.splice(mazeNumber.indexOf(element),1);\n        });\n\n        solveMaze();\n    }\n\n    const init= (n)=>{\n        for(let x=0; x<n; x++){\n            maze.push(x)\n        }\n    \n    }\n\n    init(100)\n\n    const handleClick = (event) =>{//when clicked removes the item from the array\n        event.target.style.backgroundColor = \"rgb(173, 106, 173)\";\n        if (maze.includes(parseInt(event.target.innerHTML))){\n            maze.splice(maze.indexOf(parseInt(event.target.innerHTML)),1)\n        }\n    }\n\n    const calcPosition =(num)=>{//calculation the row and the col of a givin position in the maze. ex 23 would calculate to row = 2, col = 3.\n        let row = Math.floor(num /10) ;\n        let col = num%10;\n        return {row,col};\n    }\n\n    const getNumPosition=(row, col)=>{\n        let s = ''\n        s += row\n        s += col;\n        let num = parseInt(s)\n        return num;\n    }\n\n    const solveMaze = () =>{\n        let path = []\n        //let col = 0,row = 0;\n        let solveMaze = maze.reverse();\n        let current = solveMaze.pop();\n\n        while(current !== 99){\n            let visual = document.getElementById(current);\n            visual.style.backgroundColor = '#F08080';\n            //check if the squares surrounding current are in the maze. example. if we're at sqr 23 to check the top would be row 1 col 13. this is sqr 13. concatenate them\n            let row = (calcPosition(current).row)\n            let col = (calcPosition(current).col)\n            //check if the sqrs around the current is in the available moves \n            if(solveMaze.indexOf(getNumPosition(row+1,col)) !== -1){//check below one \n                //path.push(current);\n                current = getNumPosition(row+1,col);\n                //remove if condition from the maze array \n                solveMaze.splice(solveMaze.indexOf(getNumPosition(row+1,col)), 1);\n            }else if (solveMaze.indexOf(getNumPosition(row-1,col)) !== -1){//check above one \n                //path.push(current);\n                current = getNumPosition(row-1,col);\n                solveMaze.splice(solveMaze.indexOf(getNumPosition(row-1,col)), 1);\n            }else if (solveMaze.indexOf(getNumPosition(row,col+1)) !== -1){//right one \n                //path.push(current);\n                current = getNumPosition(row,col+1);\n                solveMaze.splice(solveMaze.indexOf(getNumPosition(row,col+1)), 1);\n            }else if (solveMaze.indexOf(getNumPosition(row,col-1)) !== -1){//leftone \n                //path.push(current);\n                current = getNumPosition(row,col-1);\n                solveMaze.splice(solveMaze.indexOf(getNumPosition(row,col-1)), 1);\n            }else{\n                path.pop();\n                visual.style.backgroundColor = 'white';\n                current = path.pop();\n            }\n            path.push(current);\n\n        }\n        console.log(path)\n    }\n\n    return ( \n        <div className=\"wrapper\">\n            <div className=\"maze-wrapper\">\n            {maze.map(num=>(\n                <div id ={num} className=\"box-wrapper\" onMouseOver = {handleClick} onClick ={handleClick} key = {num}>{num}</div>\n            ))}\n            \n            </div>\n        <button onClick={solveMaze} className = 'btn'>SOLVE</button>\n        </div>\n     );\n}\n \nexport default Maze;","import Heading from \"./components/Heading\";\nimport Maze from \"./components/Maze\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Heading/>\n    <Maze />\n    \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}